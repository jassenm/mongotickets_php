<?php
#
# Copyright (c) 2007, Jassen Moran. All rights reserved.
# Quad tickets Confidential Proprietary.
#


// include the SOAP classes
require_once('../lib/nusoap.php');
require_once('../include/new_urls/ticket_db.php');
require_once('../include/EventInventoryWebServices.inc.php');
require_once('err.php');
require_once('../include/mail.php');
require_once('../include/new_urls/url_factory.inc.php');



print_message("Preparing database for Event import....... ");


$dbh=mysql_connect ($host_name, $db_username, $db_password)
			or die ('I cannot connect to the database because: ' . mysql_error());
mysql_select_db ($db_name);

$bsql = "DROP TABLE IF EXISTS Events_temp";
$query_result = mysql_query($bsql) or die ('drop table failed: ' . mysql_error());


$bsql = "CREATE TABLE Events_temp (
		EventID INT NOT NULL,
		EventName CHAR(100),
		EventTypeID CHAR(100),
                SanitizedEventName CHAR(100),
		CategoryID INT,
		EventRank SMALLINT NOT NULL,
		PRIMARY KEY (EventID)
	) ENGINE MyISAM";
$query_result = mysql_query($bsql) or die ('CREATE TABLE Events_temp failed: ' . mysql_error());



print_message("Done.");

// create client object
$soapclient = new SoapClient($serverpath);

$soapclient -> timeout = 500;
$soapclient -> response_timeout = 500;


//set soap Action
$method= 'GetAllEvents';
$soapAction= $namespace . $method;

$num_events_returned = 0;
$eventRank = 2000;
$method = 'GetAllEvents';
$param = array( 'SecurityToken' => "$securitytoken");
print_message("Invoking $method web method.....");

# 6/29 Jassene commented out was taking too long
#$result = $soapclient->call($method,$param,$namespace,$soapAction);
try {
	$result = $soapclient->GetAllEvents($param);
	print_message("Done Calling $soapAction.");
# commented out since changed "new soapclient()" to "new SoapClient"
#if ($soapclient->getError())
#{
# 	print_message("ImportEventsFromWS: Error : \nSTART_GET_ERROR\n" . $soapclient->getError() . "\nEND_GET_ERROR\nSTART_DEBUG_STR\n" . $soapclient->debug_str . "\nEND_DEBUG_STR\n");
#        print_message("ImportEventsFromWS: Error : retrying $method with 1,000 second timeout\n");
#	send_an_email('admin@email.com','GetAllEvents failed 1st try!','GetAllEvents failed 1st try!');
#	unset($soapclient);
#	$soapclient = new soapclient($serverpath);
#	$soapclient -> timeout = 1000;
#	$soapclient -> response_timeout = 1000;
#	$result = $soapclient->call($method,$param,$namespace,$soapAction);
#}

#if ($soapclient->getError())
#{
# 	print_message("ImportEventsFromWS: Error retries exhausted: \nSTART_GET_ERROR\n" . $soapclient->getError() . "\nEND_GET_ERROR\nSTART_DEBUG_STR\n" . $soapclient->debug_str . "\nEND_DEBUG_STR\n");
#	send_an_email('admin@email.com','GetAllEvents failed 2nd try!','GetAllEvents failed 2nd try!');
#
#	die('exiting');
#
#}
#else {
#
#	send_an_email('admin@email.com','GetAllEvents succeeded!!!!','GetAllEvents succeeded!!!!');
#	print_message("Importing Event data....");
#
#	// if a fault occurred, output error info
#	if (isset($fault)) {
#		send_an_email('admin@email.com','isset fault occurred!!!!','fault occurred!!!!');
#		print_message("Error: ". $fault);
#	}
#	else if ($result) {

#		if (isset($result['faultstring']))
#		{
#			send_an_email('admin@email.com','isset result fault occurred!!!!','isset faultstring occurred: !!!!' . $result['faultstring']);
#			print_message("Error: result[]" . $result['faultstring']);
#		}
#		else {
#			$root=$result['ROOT'];
#			if(isset($root['MESSAGE'])) {
#				send_an_email('admin@email.com','isset root MESSAGE occurred!!!!','isset root MESSAGE occurred: !!!!' . $$root['MESSAGE']);
#				print_message($root['MESSAGE']);
#			}
#			else {
#			$data = $root['DATA'];
			if($data != '') {
				$num_events_returned++;
	 			$row = $data['row'];             
				if(is_array($row[0]) == '') {
					$eid = $row['!EventID'];
  					$raw_ename = $row['!EventName'];
  					$ename = mysql_escape_string($row['!EventName']);
 					$etypeid = $row['!EventTypeID'];
	 				$cid = $row['!CategoryID'];
   					InsertIntoEvents_temp($eid, $ename, $raw_ename, $etypeid, $cid, $eventRank);
					$num_events_returned++;

				}
				else {
					$num_events_returned++;
					for($i=0;$i<count($row);$i++)
					{
						$eid = $row[$i]['!EventID'];
  						$raw_ename = $row[$i]['!EventName'];
  						$ename = mysql_escape_string($row[$i]['!EventName']);
 						$etypeid = $row[$i]['!EventTypeID'];
	 					$cid = $row[$i]['!CategoryID'];
   						InsertIntoEvents_temp($eid, $ename, $raw_ename, $etypeid, $cid, $eventRank);
						$num_events_returned++;
					} # end for
				}
			} # end if no data
#}
		#}
	#} # end if result
	else {
		send_an_email('admin@email.com','No result!!!!','No result!!!!' . $$root['MESSAGE']);
		print_message("No result");
	}
}
catch {
}
#}
// kill object
unset($soapclient);

$bsql = "DELETE FROM Events_temp WHERE EventID=1";
$query_result = mysql_query($bsql) or die ('DELETE EventID=1 FROM Events_temp query failed: ' . mysql_error());

$eventName_mod_list = Array(
                14255 => 'Ourglass Concert',
                8405 => 'Strunz n Farah',
                14340 => 'The Jena Six Empowerment Concert',
		15874 => 'Revolution Dance',
		18251 => 'BamaJam Music n Arts Festival',
		19734 => 'Rebel Concert'
                );

foreach($eventName_mod_list as $eid => $ename) {
	$san_ename = strtolower(_prepare_url_text($ename));
        $bsql = "UPDATE Events_temp SET EventName='$ename',SanitizedEventName='$san_ename' WHERE EventID=$eid";
        $query_result = mysql_query($bsql) or die ('UPDATE Events_temp SET EventName failed: ' . mysql_error());
}



mysql_close($dbh);

if($num_events_returned < 1) {
	send_an_email('admin@email.com','No result!!!!','No result!!!!' . $$root['MESSAGE']);
	print_message("No events returned, exiting...");
}
print_message("Done.");
print_message("$num_events_returned Events returned from Web Services");


print_message("Done.");
print_message("ImportEventsFromWS complete\n");



function InsertIntoEvents_temp($eid, $ename, $raw_ename, $etypeid, $cid, $eventRank)
{
	$san_ename = strtolower(_prepare_url_text($ename));
        # $san_ename = str_replace( '-at-', '-'  , $san_ename);
 
	$san_raw_ename = strtolower(_prepare_url_text($raw_ename));
	if((strlen($san_raw_ename) < 1) || (strlen($raw_ename) < 1) || ($raw_ename == '!!!')) {
		#skip
	}
	else {
	$bsql = "INSERT INTO Events_temp " .
		"(EventID,EventName,EventTypeID,SanitizedEventName,CategoryID,EventRank) " .
		"VALUES ('$eid', '$ename', '$etypeid', '$san_ename', '$cid', '$eventRank');";
	$insert_result = mysql_query($bsql) or die ('InsertIntoEvents_temp: query failed: ' . mysql_error() . '\n' . "$eid, $ename, $etypeid, $cid, $eventRank");

	}

}


?>
